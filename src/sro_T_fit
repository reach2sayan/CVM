#!/usr/bin/env python3

import argparse
import os
import json
from lmfit import Model, Parameters
import numpy as np
import matplotlib.pyplot as plt
from energyfunctions import sro_T
import warnings

def read_results(fname):

    try:
        with open(fname,'r') as fhandle:
            data = json.load(fhandle)
    except Exception as e:
        print(f'Error opening data file {fname}...')
        exit(1)

    xdata = np.array([item.get('temperature') for item in data])
    ydata = np.array([item.get('F_cvm') - item.get('F_rnd') for item in data])

    return xdata, ydata

def read_coeffs(fname,degree):

    trial = []
    try:
        with open(fname,'r') as handle:
            data = handle.readlines()
        for idx, d in enumerate(range(degree+1)):
            tmp = data[idx].strip().split(',')
            trial.append([float(tmp[0]), float(tmp[-1])])
        trial.append([0.01, 0])
        return np.array(trial)
    except Exception as e:
        print('File not found. Sending defaults')
        for d in range(degree+1):
            if d == 0:
                trial.append([1, 0])
            else:
                trial.append([1*(-1)**d, 0.01])
        trial.append([0.01, 0])
        return np.array(trial)


if __name__ == '__main__':

    cwd = os.getcwd()
    np.set_printoptions(suppress=True, precision=4)

    parser = argparse.ArgumentParser(description='Fits SRO correction to a function in T')
    parser.add_argument('--degree', '--deg',
                        default='3',
                        type=int,
                        help="Maximum power of the fit (default: %(default)s)",
                       )
    parser.add_argument('--sro_correction',
                        default='sro_correction.json',
                        help="filename which contains the results of the CVM optimisation (default: %(default)s)",
                       )
    parser.add_argument('--method',
                        default='least-squares',
                        help="method of fitting a function on T to the SRO correction",
                       )
    parser.add_argument('--out',
                        default='sro_coeffs.out',
                        help="filename to store the result of the fit (default: %(default)s)",
                       )
    parser.add_argument('--coeff',
                        default='sro_coeffs.in',
                        help="filename to store the initial params of the fit (default: %(default)s)",
                       )
    parser.add_argument('--verbose', '-v', default=0,
                        help="Indicate the verbosity of the fit (default: %(default)s)",
                       )
    parser.add_argument('--skip_expo',
                        action='store_true',
                        default=False,
                        help="Flag to skip fitting exponents (default: %(default)s)",
                       )
    parser.add_argument('--show_warning',
                        action='store_true',
                        default=False,
                        help="Enables to show warning (default: %(default)s)",
                       )
    args = parser.parse_args()

    if not args.show_warning:
        warnings.filterwarnings('ignore')
    degree = args.degree
    xdata, ydata = read_results(args.sro_correction)
    model = Model(sro_T)
    params = Parameters()
    ini_coeff = read_coeffs(args.coeff,degree)
    for i in range(degree+1):

        if i == 0:
            params.add(f'coeff_{i}', value=ini_coeff[0][0], vary=False,)
            params.add(f'exp_{i}',value=ini_coeff[0][-1], min=0, vary=False)
        elif i == degree:
            params.add(f'coeff_{i}', expr='-'+'-'.join(f'coeff_{i}' for i in range(degree)),
                       value=1*(-1)**i,
                       min=-5, max=5,
                      )
            if args.skip_expo:
                params.add(f'exp_{i}',value=ini_coeff[i][-1], min=0, vary=False)
            else:
                params.add(f'exp_{i}',value=ini_coeff[i][-1], min=0, vary=True)
        else:
            params.add(f'coeff_{i}', value=ini_coeff[i][0], min=-5, max=5, vary=True)
            if args.skip_expo:
                params.add(f'exp_{i}',value=ini_coeff[i][-1], min=0, vary=False)
            else:
                params.add(f'exp_{i}',value=ini_coeff[i][-1], min=0, vary=True)

    params.add('C',value=ini_coeff[-1][0])
    params.add('degree',value=degree, vary=False)

    print('Preparing Parameters for fit...')
    print(params.pretty_print())

    print('Performing fit...')

    try:
        results = model.fit(ydata,
                            params=params,
                            T=xdata,
                            method=args.method,
                            verbose=args.verbose
                           )
    except Exception as e:
        print('Error Fitting...')
        exit(1)

    print('Fitting Results:')
    print(results.fit_report())
    best_params = results.best_values

    assert np.isclose(model.eval(T=np.inf,**best_params),0.0)
    with open(f'{args.out}','w') as fout:
        for d in range(degree+1):
            c = best_params[f'coeff_{d}']
            e = best_params[f'exp_{d}']
            fout.write(f'{c},{e}\n')
        bestC = best_params['C']
        fout.write(f'{bestC},0')

    plt.style.use('seaborn-paper')
    fig = plt.figure(dpi=100, figsize=(5, 4),)

    xr = np.linspace(0,int(max(xdata)),100)
    yr = model.eval(T=xr,**best_params)
    plt.plot(xdata, ydata, '.', label='data')
    plt.plot(xr,yr,label='fit')
    plt.xlabel('T')
    plt.ylabel(r'F$_{cvm}$ - F$_{disordered}$')
    plt.grid(True)
    plt.legend()

    plt.savefig(f'{args.out}.svg')
